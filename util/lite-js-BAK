#!/usr/bin/env node
// This is the command line interface to LiteScript Compiler

//defaults:

    var COMPILER = 'v0.6.0';
    var OUT_DIR = '.';


    var path = require('path');

//------------------------
// Helper functions,
// parse command line parameters
//------------------------
    function Args(argv){    // extends Array
        var arr = argv.slice(2); //remove 'node lite' from command line arguments
        arr.__proto__ = Args.prototype; // subclasses Array
        return arr;
    }
    Args.prototype.__proto__=Array.prototype; // extends Array

    Args.prototype.option=function(argName){
        pos = this.indexOf("-"+argName);
        if (pos>=0){ 
            this.splice(pos,1);
            return true;
        }
        return false;
    }

    Args.prototype.value=function(argName){
        pos = this.indexOf("-"+argName);
        if (pos>=0){ 
            var value = this[pos+1]
            this.splice(pos,2);
            return value;
        }
        return undefined;
    }


    var color={
                normal:   "\x1b[39;49m"
                ,red:      "\x1b[91m"
                ,yellow:   "\x1b[93m"
                ,green:    "\x1b[32m" 
    };

//
//-- MAIN--------------------------------------
//

    var usage = "Usage: \n"
    +"> lite -compile dir/mainModule [options]\n"
    +"\n"
    +"this command wil launch the LiteScript Compiler on dir/mainModule.\n"
    +"\n"
    +"options are:\n"
    +"-compile *dir/mainModule*: main module to compile\n"
    +"-o *dir*: select output dir. Default is '.'\n"
    +"-verbose *level*: verbose level, default is 1 (0-2)'\n"
    +"-warning *level*: warning level, default is 1 (0-1)'\n"
    +"-debug: enable full compiler debug log file at 'out/debug.log'\n"
    +"-use *v0.3*: select LiteScript Compiler Version to use\n"
    +"-force: force recompilation of unchanged source files\n"
    ;

    var args = new Args(process.argv);

    console.log("\n\nlite",args.join(' '));

    options = {
        outDir: path.resolve(args.value('o')||OUT_DIR) //output dir
        ,verbose: args.value("verbose") 
        ,warning: args.value("warning") 
        ,debug: args.option("debug") 
        ,force: args.option("force") // force compilation of unmodified files
    }

    var use = args.value('use')||COMPILER;
    options.compilerToUse = './liteCompiler-'+use;

    var mainModuleName = args.value("compile") 
    if (!mainModuleName)  {
        console.log("ERROR: missing -compile dir/MainModule");
        process.exit(2);
    }

    // no args should be left
    if (args.length)  {
        console.log(usage)
        console.log("ERROR: Invalid parameter:", args.join())
        process.exit(2);
    }

    try {

        //--------------------
        //load required version of LiteScript compiler
        //--------------------

        //console.log(process.cwd());
        console.log('using compiler: '+options.compilerToUse);
        console.log('cwd: '+process.cwd());
        console.log('mainModuleName: '+mainModuleName);

        var Compiler = require('../'+options.compilerToUse+'/Compiler.js');

        //--------------------
        // launch project compilation
        //--------------------

        if (use >= "v0.4")
            Compiler.compileProject(mainModuleName, options);

        else if (use >= "v0.3")
            Compiler.compile(mainModuleName, options);

        else
            { //versions <= 0.2
            //--------------------
            // calc basePath (rel path to main module)
            //--------------------
            var basePath = path.relative(process.cwd(),path.dirname(mainModuleName) );
            mainModuleName = path.basename(mainModuleName);
            Compiler.compile(basePath, mainModuleName, options);
        };


    }
    catch(e){

        if (e.controled){
            console.error(color.red, e.message, color.normal);
            process.exit(1);
        }
        else if (e.code==='EISDIR'){
            console.error(color.red + 'ERROR: "'+mainModuleName+'" is a directory',color.normal);
            console.error('Please specify a *file* as the main module to compile');
            process.exit(2);
        }
        else {
            console.log('UNCONTROLED ERROR:');
            console.log(e);
            throw e;
        }
    };


