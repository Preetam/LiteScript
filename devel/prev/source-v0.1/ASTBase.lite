The Abstract Syntax Tree (AST) Base class
-----------------------------------------

This module defines the base abstract syntax tree class used by the grammar. 
It's main purpose is to provide utility methods used in the grammar 
for **req**uired tokens, **opt**ional tokens 
and comma or semicolon **Separated Lists** of symbols.

Dependencies

    var Lexer = require('./Lexer')

/!
    
    declare debug,log

    declare on log
      error, warning

    declare on Error.prototype
      message
      controled
      soft

!/

----------------------------------------------------------------------------------------------
##OutCode helper class
outCode: helper methods to produce code
Theese are helper methods for AST nodes produce() methods
It also handles SourceMap generation for Chrome Developer Tools debugger and Firefox Firebug

    class OutCode
/!

      properties
        lineNum, column
        currLine:string
        lines:string array
        uniqueIds
        sourceMap

!/

      method start()

Source Map
globalMap for sourceMapping
https://github.com/mozilla/source-map#with-sourcemapgenerator-low-level-api

        me.lineNum=1
        me.column=1
        me.lines=[]
        me.uniqueIds={}
        
        #me.sourceMap = require('../sourceMap.js')

###Generate unique variable names

      method getUniqueVarName(prefix)

        var id = me.uniqueIds[prefix] or 0

        id += 1

        me.uniqueIds[prefix] = id

        return prefix + '__' + id

### out some text into produced code

      method out(text:string)

if no current line

        if me.currLine is undefined

create a empty one

            me.currLine=""
            me.column=1

        if text
            me.currLine += text
            me.column += text.length

### Start New Line into produced code

      method startNewLine()

if there is something in the buffer

        if me.currLine isnt undefined

send the current line

          me.lines.push(me.currLine)
          debug( me.lineNum+ ' '+ me.currLine)

clear current line

          me.lineNum += 1
          me.currLine = undefined


### get result and clear memory

      method getResult()

        me.startNewLine() #close last line
        var result = me.lines
        me.lines = []
        return result



-----------------------------
outRemove removes the last part of inserted code, starting from a col
It is used when a produce() method require "rewind" in order to prepend code
Example:
 Lite: `if getItem(index++) is Array`
 js: `if (Array.isArray(getItem(index++)))`
The Lite producer, outs , `getItem(index++)` but then it read 'Array' and 
it has to to wrap the entire expression with `Array.isArray()`
so we "remove" the last produced string: `getItem(index++)`, and then insert 
`Array.isArray(`, `getItem(index++)`, `)`

      method outRemove(col)
        var result = me.currLine.substr(col-1) 
        debug '<-(backspace)<-: ', result
        me.currLine = me.currLine.substr(0,col-1) 
        me.column=col
        return result




ASTBase Class
=============

This class serves as a base class on top of which AST nodes are defined.
It contains basic functions to parse the token stream.

forward declares  - class methods

    class ASTBase

/!

      properties
        parent, lexer:Lexer, sourceLineNum, lineInx
        column, index
        indent, locked
        name, type
        outCode 

!/

      method initialize(parent:ASTBase)

        me.parent = parent

Get lexer from parent

        me.lexer = parent.lexer

Remember this node source position

        if me.lexer and me.lexer.sourceLineNum
          me.sourceLineNum = me.lexer.sourceLineNum
          me.column = me.lexer.token.column

Also remember line index in tokenized lines, and this line indent

          me.lineInx = me.lexer.lineInx
          me.indent = me.lexer.indent

        #debug "created",me.constructor.name,"indent",me.indent

------------------------------------------------------------------------
**lock** marks this node as "locked", meaning we are certain this is the right class
for the given syntax. For example, if the `FunctionDeclaration` class see the token `function`,
we are certain this is the correct class to use, so we 'lock()'. 
Once locked, any **req**uired token not present causes compilation to fail.

      method lock()
        me.locked = on

debug helper method *positionText*

      method positionText() 
        if not me.lexer
          return "(built-in)"    
        return "#{me.lexer.filename}:#{me.sourceLineNum}:#{me.column or 0}"
  
debug helper method toString()

      method toString()
        return "[#{me.constructor.name}]"


------------------------------------------------------------------------
**throwError** add lexer position info and throws a 'controled' error

      method throwError(msg)
        var err = new Error(me.lexer.posToString() + ". " + msg)
        err.controled = true
        throw err
      #end 

------------------------------------------------------------------------
**throwParseFailed** throws a soft-error

During a node.parse(), if there is a token mismatch, a "parse failed" is raised.
"parse failed" signals a failure to parse the tokens from the stream, 
however the syntax might still be valid for another AST node. 
If the AST node was locked-on-target, it is a hard-error.
If the AST node was NOT locked, it's a soft-error, and will not abort compilation 
as the parent node will try other AST classes against the token stream before failing.

      method throwParseFailed(msg)

        if me.locked #hard error if locked
          me.throwError(msg) 

        var err = new Error(msg)
        err.soft = true  #"parse failed" is a soft error
        err.controled = true
        throw err

------------------------------------------------------------------------
**parse()** is an abstract method representing the TRY-Parse of the node.
Child classes _must_ override this method

      method parse()
        me.lock()
        me.throwParseFailed 'Parser Not Implemented: ' + me.constructor.name

**produce()** is the method to produce target code
Child classes should override this, if the default production isnt: `me.out me.name`

      method produce()
        me.out me.name

----------------------------------------------------------------------------------------------

      method parseDirect(key,directObj)

We use a DIRECT associative array to pick the exact AST node to parse 
based on the actual token value or type.
This speeds up parsing, avoiding parsing by trial & error

Check keyword

        if directObj.hasOwnProperty(key)

get class

          var directASTNode = directObj[key]

try parse

          var statement = me.opt(directASTNode)

if parsed ok, assign keyword for reference

          if statement
            statement.keyword = key
          
return parsed statement or nothing

          return statement

      #end method


----------------------------------------------------------------------------------------------
**opt** attempts to parse the token stream using one of the classes or token types specified.
This method takes a variable number of arguments.
For example:
  calling `me.opt IfStatement, Expression, 'IDENTIFIER'`
  would attempt to parse the token stream first as an `IfStatement`. If that fails, it would attempt
  to use the `Expression` class. If that fails, it will accept a token of type `IDENTIFIER`.
  If all of those fail, it will return `undefined`.

      method opt()

Remember the actual position, to rewind if all the arguments to `opt` fail

        var startPos = me.lexer.getPos()

        #debug
        var spaces = me.levelIndent()

For each argument, -a class or a string-, we will attempt to parse the token stream 
with the class, or match the token type to the string.

/!
        
        declare debug

        declare searched
        declare on searched
          toUpperCase
          name
!/

        for searched in arguments

skip empty, null & undefined

          if no searched
            continue

determine value or type
For strings we check the token **value** or **TYPE**, and return the token value

          if typeof searched is 'string'

            var isTYPE = /^[A-Z]+$/.test(searched)

            debug spaces, me.constructor.name,'TRY',searched, 'on', me.lexer.token.toString()

            if (isTYPE and me.lexer.token.type is searched) or (not isTYPE and me.lexer.token.value is searched)

Ok, type/value found! now we return: token.value
Note: we shouldnt return the 'token' object, because returning objects (here and in js) 
is a "pass by reference". You return a "pointer" to the object.
If we return the 'token' object, the calling function will recive a "pointer"
and it can inadvertedly alter the token object in the token stream. (it should not - subtle bugs)

              debug spaces, me.constructor.name,'matched OK:',searched, me.lexer.token.value

              var result = me.lexer.token.value 

Advance a token, me.lexer.token always has next token

              me.lexer.nextToken()

              return result

          else

"searched" is a AST class

            debug spaces, me.constructor.name,'TRY',searched.name, 'on', me.lexer.token.toString()

if the argument is an AST node class, we instantiate the class and try the `parse()` method.
`parse()` can fail with `ParseFailed` if the construction do not match

            try
/!
              
                declare astNode:ASTBase
!/

                var astNode = new searched(me)
                astNode.parse() # if it can't parse, will raise an exception

                debug spaces, 'Parsed OK!->',searched.name

                return astNode # parsed ok!, return instance

            catch err

If parsing fail, but the AST node were not 'locked' on target, (a soft-error),
we will try other AST nodes.

              if err.soft

                  debug spaces, searched.name,'parse failed.',err.message

rewind the token stream, to try other AST nodes

                  debug 'REW to', me.sourceLineNum, me.lexer.index, me.lexer.token.toString()
                  me.lexer.setPos startPos

              else

else: it's a hard-error
The AST node were locked-on-target, or is a generic error.
We abort parsing and throw.

                  # debug

                  # the first hard-error is the most informative, the others are cascading ones
                  if me.lexer.hardError is null 
                      me.lexer.hardError = err
                  #end if

raise up, abort parsing

                  raise err

              #end if - type of error

            #end catch
            
          #end if - string or class

        #loop - try the next argument

No more arguments.
`opt` returns `undefined` if none of the arguments could be use to parse the stream.

        return undefined

      #end method opt

-----------------------------

**req** works the same way as `opt` except that it throws an error if none of the arguments
can be used to parse the stream.

      method req()

We first call `opt` to see what we get. If a value is returned, the function was successful,
so we just return the node that `opt` found.

else, If `opt` returned nothing, we give the user a useful error.

        var result = me.opt.apply(this,arguments)

        if no result 
          me.throwParseFailed "#{me.constructor.name}: found #{me.lexer.token.toString()} but #{me.listArgs(arguments)} required"

        return result


------------------------------------------------------------------------
**optValue** checks if the next token has a "value" that matches one of the arguments provided.
If so, it returns token.value and advances the stream. Otherwise, it returns `nothing`.

      method optValue()

        var actual = me.lexer.token.value

        if actual in arguments

One of the searched 'values' match

          debug me.levelIndent(),'OK->',actual

Advance the token stream. lexer.token always has the next token

          me.lexer.nextToken()

return found token.value

          return actual

        else

          return undefined

------------------------------------------------------------------------
**reqValue** is the same as `optValue` except that it throws an error if the value 
is not in the arguments

      method reqValue()
        
First, call optValue

        var val = me.optValue.apply(this,arguments)
        if val 
            return val

if it returns nothing, the token.value didn't match. We raise an error. 
if the AST node was 'locked' on target, it'll be a hard-error, 
else, it'll be a soft-error and others AST nodes could be tried.

        me.throwParseFailed "#{me.constructor.name}: found '#{me.lexer.token.value}' but expected: #{me.listArgs(arguments)}"

------------------------------------------------------------------------------------
**ifOptValue** this very simple method calls 'optValue' but returns true|false instead of string|undefined

      method ifOptValue()
        if me.optValue.apply(this,arguments) 
          return true
        else
          return false


------------------------------------------------------------------------------------
**optList** this generic method will look for zero or more of the requested class,

      method optList(astClass)

        var item
        var list=[]
        
        while true

            item = me.opt(astClass)
            
            if no item #no more items
              return list
            
            list.push item

        #loop


####a helper method optNewLine()
internal function to get optional NEWLINE. Warn if indent is not even.

      method optNewLine()
        var nl = me.opt('NEWLINE')
        if nl and me.lexer.indent mod 2 isnt 0
          log.warning "#{me.lexer.posToString()}. Odd indent #{me.lexer.indent}"
        return nl


###a method optSeparatedList(astClass:ASTBase, separator, closer)

      method optSeparatedList(astClass:ASTBase, separator, closer)

        debug "optSeparatedList [#{me.constructor.name}] indent:#{me.indent}, get SeparatedList of [#{astClass.name}] by '#{separator}' closer:", closer or '-no closer char-'

Start optSeparatedList

        var result = []

If the list starts with a NEWLINE, 
process as free-form mode separated list

        if me.lexer.token.type is 'NEWLINE'
          return me.optFreeFormList( astClass, separator, closer )

normal separated list
loop until closer found

        var startLine = me.lexer.sourceLineNum
        while true

if closer found, end of list

            if me.opt(closer) 
              break #end of list

else, get a item

            var item = me.req(astClass)
            me.lock()

add item to result

            result.push(item)

newline after item (before comma or closer) is optional

            me.optNewLine()

if, after newline, we got the closer, then exit. 

            if me.opt(closer) #closer found
                break

here 'comma/semicolon' means: 'there is another item'
any token other than comma means 'end of comma separated list'

            if not me.opt(separator)
              #any token other than comma/semicolon means 'end of comma separated list'
              #if a closer was required, then this is an error
              if closer
                me.throwError "Expected '#{closer}' to end list started at line #{startLine}"
              break # ok, end of comma separated list'
            #end if

optional newline after comma 

            me.optNewLine() 

        #loop, try get next item

        return result

###a method optFreeFormList

In "freeForm Mode", each item stands in its own line, and commas (separators) are optional.
The item list ends when a closer is found or when indentation changes

      method optFreeFormList(astClass:ASTBase, separator, closer)

        var result = []
        var lastItemSourceLine = -1
        var separatorAfterItem

FreeFormList should start with NEWLINE
First line sets indent level

        me.req "NEWLINE"
        var startLine = me.lexer.sourceLineNum
        var blockIndent = me.lexer.indent

        if blockIndent <= me.indent #first line is same or less indented than parent - assume empty list
          me.lexer.sayErr "free-form SeparatedList: next line is same or less indented (#{blockIndent}) than parent indent (#{me.indent}) - assume empty list"
          return result

now loop until a indent change

        while true

if closer found (`]`, `)`, `}`), end of list

            if me.opt(closer) #
              break #end of list

check if there are more tha one statement on the same line, with no separator

            if not separatorAfterItem and me.lexer.sourceLineNum is lastItemSourceLine 
                me.throwError "More than one [#{astClass.name}] on line #{lastItemSourceLine}. Missing ( ) on function call?"

else, get a item

            lastItemSourceLine = me.lexer.sourceLineNum
            var item = me.req(astClass)
            me.lock()

add item to result

            result.push(item)

newline after item (before comma or closer) is optional

            var newLineAfterItem = me.optNewLine()

if, after newline, we got the closer, then exit. 
closer is normally one of: `]` , `)`, `}`

            if me.opt(closer) #closer found
                break

check indent changes

            debug "freeForm Mode indent:#{blockIndent} me.lexer.indent:#{me.lexer.indent}"
            if me.lexer.indent isnt blockIndent 

indent changed:
if a closer was specified, indent change before the closer means error (line misaligned)

                  if closer 
                    me.throwError "Misaligned indent: #{me.lexer.indent}. Expected #{blockIndent}, or '#{closer}' to end block started at line #{startLine}"

check for excesive indent

                  if me.lexer.indent > blockIndent
                    me.throwError "Misaligned indent: #{me.lexer.indent}. Expected #{blockIndent} to continue block, or #{me.indent} to close block started at line #{startLine}"

else, if no closer specified, indent decreased => end of list

                  break #end of list

            #end if

in reeForm mode, separator (comma|semicolon) is optional, 
NEWLINE also is optional and valid 

            separatorAfterItem = me.opt(separator)
            me.optNewLine() 

        #loop, try get next item

        debug "END freeFormMode [#{me.constructor.name}] blockIndent:#{blockIndent}, get SeparatedList of [#{astClass.name}] by '#{separator}' closer:", closer or '-no closer-'

set body indent to block indent
        
        me.indent = blockIndent
        if closer 
          me.optNewLine() # optional newline after closer in free-form

        return result


------------------------------------------------------------------------
**reqSeparatedList** is the same as `optSeparatedList` except that it throws an error 
if the list is empty

      method reqSeparatedList(astClass:ASTBase, separator, closer)
        
First, call optSeparatedList

/!
              
        declare result:array
!/

        var result = me.optSeparatedList(astClass, separator, closer)
        if result.length is 0
          me.throwParseFailed "#{me.constructor.name}: Get list: At least one [#{astClass.name}] was expected"

        return result


--------------------------------
**getParent** method searchs up the AST until found the specfied node class

      method getParent(searchedClass)

        var node = me
        while node and not(node instanceof searchedClass)
            node = node.parent # move to parent
        return node

------------------------------------------------------------------------
#debug - listArgs list arguments, for debugging

      method listArgs(args)
        var msg = []
        for i in args
/!

            declare on i
              name
!/

            if typeof i is 'string'
                msg.push("'#{i}'")
            else if i
                if typeof i is 'function'
                  msg.push("[#{i.name}]")
                else
                  msg.push("<#{i.name}>")
            else
                msg.push("[null]")

        return msg.join('|')



Helper functions for code generation
=====================================

      method out()

*out* is a helper function for code generation
It evaluates and output its arguments. uses ASTBase.prototype.outCode

        for item in arguments
/!

          declare on item
            COMMENT:string, NLI, CSL:array, freeForm
            name, lexer, produce, out
          
!/          

if it is the first thing in the line, out indent

          if not me.outCode.currLine 
            me.outCode.out String.spaces(me.indent-1)

if it is an AST node, call .produce()

          if item instanceof ASTBase 
            item.produce()

 New line char => start new line, with this statement indent

          else if item is '\n' 
            me.outCode.startNewLine()

          else if typeof item is 'string'
            me.outCode.out item

Object codes

          else if item and typeof item is 'object'

if the object is an array, recursive call

            if item instanceof Array
              me.out.apply me,item #recursive

{CSL:arr} -> output the array as comma separated values
 
            else if item.hasOwnProperty('CSL')

              if no item.CSL
                #empty list
                continue

              for itemCSL at inx in item.CSL

                if inx>0 
                  me.outCode.out item.separator or ', '

                if item.freeForm 
                  if itemCSL instanceof ASTBase
                    itemCSL.out '\n' #(prettier generated code) use "itemCSL" indent
                  else
                    item.out '\n'

                me.out itemCSL

              #end for

              if item.freeForm 
                me.out '\n'

 {NLI:indent} --> new line and spaces to reach the indent
            
            else if item.NLI isnt undefined

              me.outCode.startNewLine()
              me.outCode.out String.spaces(item.NLI-1)
 
 
 {COMMENT:text} --> output text as a comment 
 
            else if item.COMMENT isnt undefined

              # prepend // if necessary
              if not item.COMMENT.startsWith("//")
                me.outCode.out "//"

              me.out item.COMMENT

            else
              var msg = "method:ASTBase.out() Caller:#{me.constructor.name}: object not recognized. type: "+ typeof item
              debug msg
              debug item
              me.throwError msg
              #fail with msg

Last chance, out item.toString()

          else if item #if there is somehting

            me.outCode.out item.toString() # try item.toString()

          #end if

        #end Loop


### out a full line as comment into produced code

      method outLineAsComment(preComment,lineInx)

        if no lineInx
          lineInx = preComment
          preComment = ""
        else
          preComment+=": "

        if no me.lexer
          log.error "ASTBase.outLineAsComment #{lineInx}: NO LEXER"
        else
          var line = me.lexer.infoLines[lineInx]
          if no line
            log.error "ASTBase.outLineAsComment #{lineInx}: NO LINE"
          else
            var prepend=""
            if preComment or (line.text and not line.text.startsWith("//"))
              prepend="//"
            me.outCode.out  String.spaces(line.indent)+prepend+preComment+line.text
            me.outCode.startNewLine()

        me.lexer.lastOutCommentLine = lineInx

      
      method outLinesAsComment(fromLine,toLine)

        if me.outCode.currLine and me.outCode.currLine.trim()
          me.outCode.startNewLine()

        me.outCode.currLine=""
        var i = fromLine
        while i<=toLine
          me.outLineAsComment i
          i+=1


-------------------------------
Here we use mozilla/source-map to generate source map items
https://github.com/mozilla/source-map#with-sourcemapgenerator-low-level-api

      method addSourceMap()
/!

        declare window
!/

        if typeof window is 'undefined' # in Node
            var sourceMapItem={ generated: {line: me.outCode.lineNum,column:me.outCode.column}, original: {line: me.sourceLineNum or 1,column: me.column},name:"a"}
            me.outCode.sourceMap.addMapping sourceMapItem

-------------

      method levelIndent()
        var indent = ' '
        var parent = me.parent
        while parent
          parent = parent.parent
          indent += '  '
        return indent


------------------------------------------------------------------------
Initialize prototype

    ASTBase.prototype.outCode = new OutCode()


------------------------------------------------------------------------
Export

    module.exports = ASTBase

